<?xml version="1.0" encoding="utf-8"?>
<Project ToolsVersion="4.0" DefaultTargets="Build;Test;Package" InitialTargets="Configure" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">

	<PropertyGroup>
		<Configuration Condition=" '$(Configuration)' == '' ">Release</Configuration>
		<IntermediateOutputPath>.nuget\</IntermediateOutputPath>
		<PackagesPath>$(IntermediateOutputPath)packages</PackagesPath>
		<Out Condition=" '$(Out)' == '' ">out</Out>
		<CommonBuildProperties>WarningLevel=0;NoWarn=1591;RunCodeAnalysis=false;Configuration=$(Configuration);SourceLinkCreate=true</CommonBuildProperties>
		<GitInfoReportImportance>high</GitInfoReportImportance>
		<GitIgnoreTagVersion>true</GitIgnoreTagVersion>
		<GitIgnoreBranchVersion>true</GitIgnoreBranchVersion>
	</PropertyGroup>

	<ItemGroup>
		<Solution Include="Moq.sln"/>
		<NuSpec Include="Moq.nuspec" />
		<Source Include="src\Moq\Moq.csproj" />
	</ItemGroup>
	
	<Target Name="Clean">
		<MSBuild Projects="@(Solution)" Properties="$(CommonBuildProperties)" Targets="Clean" />
		<Exec Command="rmdir $(Out) /S /Q" ContinueOnError="true" />
		<Exec Command="rmdir $(PackagesPath) /S /Q" ContinueOnError="true" />
	</Target>

	<Target Name="Rebuild" DependsOnTargets="Clean;Build" />
	
	<Target Name="Build">
		<MSBuild Projects="@(Solution)" Properties="$(CommonBuildProperties)" />
	</Target>

	<Target Name="Test" DependsOnTargets="Build">

		<!-- See if dotnet CLI is available: -->
		<Exec ContinueOnError="True" Command="dotnet --info">
			<Output TaskParameter="ExitCode" PropertyName="DotNetErrorCode"/>
		</Exec>
		<Warning Condition="'$(DotNetErrorCode)' != '0'" Text="Error in executing dotnet." />

		<Exec Command="dotnet xunit -nobuild -configuration $(Configuration) -noshadow -appveyor -html ..\..\$(Out)\test.html -xml ..\..\$(Out)\test.xml"
		      WorkingDirectory="tests\Moq.Tests"
			  ContinueOnError="false" />

		<Exec Command="dotnet xunit -nobuild -configuration $(Configuration) -noshadow -appveyor -html ..\..\$(Out)\test-vb.html -xml ..\..\$(Out)\test-vb.xml"
		      WorkingDirectory="tests\Moq.Tests.VisualBasic"
			  ContinueOnError="false" />
	</Target>

	<Target Name="Package" DependsOnTargets="Build">
		<Exec Command='"$(NuGet)" Pack "%(NuSpec.Identity)" $(Args) -Version $(Version) -Properties Id=%(NuSpec.Filename);Configuration=$(Configuration);Version=$(Version) -OutputDirectory $(Out)' />

		<!-- See if dotnet CLI is available: -->
		<Exec ContinueOnError="True" Command="dotnet --info">
			<Output TaskParameter="ExitCode" PropertyName="DotNetErrorCode"/>
		</Exec>
		<Warning Condition="'$(DotNetErrorCode)' != '0'" Text="Error in executing dotnet." />
	</Target>

	<!-- Configure and restore initial targets and packages -->
	<Import Project="NuGet.Restore.targets" />
	<PropertyGroup>
		<GitInfoTargets>$(PackagesPath)\GitInfo\build\GitInfo.targets</GitInfoTargets>
		<PendingRestore Condition=" !Exists('$(GitInfoTargets)') ">true</PendingRestore>
	</PropertyGroup>

	<Target Name="GitVersion" /><!-- Gets overridden by the $(GitInfoTargets) if it exists -->
	<Import Project="$(GitInfoTargets)" Condition=" Exists('$(GitInfoTargets)') " />

	<Target Name="Configure" DependsOnTargets="_GetNuGet;GitInfoReport">
		<!-- We always run NuGet Install since it already checks for already-installed packages and skips them -->
		<Exec Command='"$(NuGet)" Install "$(MSBuildThisFileDirectory)packages.config" -OutputDirectory "$(PackagesPath)" -ExcludeVersion' />

		<!-- Errors if nuget packages were restored during the build -->
		<Error Text="Required build-time NuGet packages were missing and were just restored. Please run the build again."
		       Condition=" '$(PendingRestore)' == 'true' And '$(target)' != 'configure' "/>

		<PropertyGroup>
			<Version>$(GitSemVerMajor).$(GitSemVerMinor).$(GitSemVerPatch)$(GitSemVerDashLabel)</Version>
		</PropertyGroup>

		<!-- Update AppVeyor build # to match the actual one being used -->
		<Exec Command="appveyor UpdateBuild -Version $(Version)" Condition=" '$(APPVEYOR)' == 'true' "
		      ConsoleToMSBuild="true"
		      ContinueOnError="WarnAndContinue" />

		<MakeDir Directories="$(Out)" Condition=" !Exists('$(Out)') " />
	</Target>
</Project>

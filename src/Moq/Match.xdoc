<?xml version="1.0" encoding="utf-8" ?>
<docs xml:space="preserve">
	<doc for="Match">
		<example>
			Creating a custom matcher is straightforward. You just need to create a method
			that returns a value from a call to <see cref="Match.Create{T}(Predicate{T})"/> with 
			your matching condition and optional friendly render expression:
			<code>
				public Order IsBigOrder()
				{
					return Match.Create&lt;Order&gt;(
						o => o.GrandTotal &gt;= 5000, 
						/* a friendly expression to render on failures */
						() => IsBigOrder());
				}
			</code>
			This method can be used in any mock setup invocation:
			<code>
				mock.Setup(m => m.Submit(IsBigOrder()).Throws&lt;UnauthorizedAccessException&gt;();
			</code>
			At runtime, Moq knows that the return value was a matcher and
			evaluates your predicate with the actual value passed into your predicate.
			<para>
				Another example might be a case where you want to match a lists of orders
				that contains a particular one. You might create matcher like the following:
			</para>
			<code>
				public static class Orders
				{
					public static IEnumerable&lt;Order&gt; Contains(Order order)
					{
						return Match.Create&lt;IEnumerable&lt;Order&gt;&gt;(orders => orders.Contains(order));
					}
				}
			</code>
			Now we can invoke this static method instead of an argument in an
			invocation:
			<code>
				var order = new Order { ... };
				var mock = new Mock&lt;IRepository&lt;Order&gt;&gt;();

				mock.Setup(x =&gt; x.Save(Orders.Contains(order)))
					 .Throws&lt;ArgumentException&gt;();
			</code>
		</example>
	</doc>
</docs>

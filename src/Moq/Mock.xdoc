<?xml version="1.0" encoding="utf-8" ?>
<docs xml:space="preserve">
	<doc for="Mock.Get">
		<example group="advanced">
			The following example shows how to add a new setup to an object
			instance which is not the original <see cref="Mock{T}"/> but rather
			the object associated with it:
			<code>
				// Typed instance, not the mock, is retrieved from some test API.
				HttpContextBase context = GetMockContext();

				// context.Request is the typed object from the "real" API
				// so in order to add a setup to it, we need to get
				// the mock that "owns" it
				Mock&lt;HttpRequestBase&gt; request = Mock.Get(context.Request);
				mock.Setup(req => req.AppRelativeCurrentExecutionFilePath)
					 .Returns(tempUrl);
			</code>
		</example>		
	</doc>
	<doc for="Mock.Verify">
		<example group="verification">
			This example sets up an expectation and marks it as verifiable. After
			the mock is used, a <c>Verify()</c> call is issued on the mock
			to ensure the method in the setup was invoked:
			<code>
				var mock = new Mock&lt;IWarehouse&gt;();
				this.Setup(x =&gt; x.HasInventory(TALISKER, 50)).Returns(true).Verifiable();
				...
				// other test code
				...
				// Will throw if the test code has didn't call HasInventory.
				this.Verify();
			</code>
		</example>
	</doc>
	<doc for="Mock.VerifyAll">
		<example group="verification">
			This example sets up an expectation without marking it as verifiable. After
			the mock is used, a <see cref="VerifyAll"/> call is issued on the mock
			to ensure that all expectations are met:
			<code>
				var mock = new Mock&lt;IWarehouse&gt;();
				this.Setup(x =&gt; x.HasInventory(TALISKER, 50)).Returns(true);
				...
				// other test code
				...
				// Will throw if the test code has didn't call HasInventory, even
				// that expectation was not marked as verifiable.
				this.VerifyAll();
			</code>
		</example>
	</doc>
	<doc for="Mock.As{TInterface}">
		<example>
			The following example creates a mock for the main interface
			and later adds <see cref="IDisposable"/> to it to verify
			it's called by the consumer code:
			<code>
				var mock = new Mock&lt;IProcessor&gt;();
				mock.Setup(x =&gt; x.Execute("ping"));

				// add IDisposable interface
				var disposable = mock.As&lt;IDisposable&gt;();
				disposable.Setup(d => d.Dispose()).Verifiable();
			</code>
		</example>
	</doc>
</docs>
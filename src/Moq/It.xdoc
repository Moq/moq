<?xml version="1.0" encoding="utf-8" ?>
<docs>
	<doc for="It.IsAny">
		<example>
			<code>
				// Throws an exception for a call to Remove with any string value.
				mock.Setup(x => x.Remove(It.IsAny&lt;string&gt;())).Throws(new InvalidOperationException());
			</code>
		</example>
	</doc>
	<doc for="It.Is">
		<example>
			This example shows how to return the value <c>1</c> whenever the argument to the
			<c>Do</c> method is an even number.
			<code>
				mock.Setup(x =&gt; x.Do(It.Is&lt;int&gt;(i =&gt; i % 2 == 0)))
				.Returns(1);
			</code>
			This example shows how to throw an exception if the argument to the
			method is a negative number:
			<code>
				mock.Setup(x =&gt; x.GetUser(It.Is&lt;int&gt;(i =&gt; i &lt; 0)))
				.Throws(new ArgumentException());
			</code>
		</example>
	</doc>
	<doc for="It.IsInRange">
		<example>
			The following example shows how to expect a method call
			with an integer argument within the 0..100 range.
			<code>
				mock.Setup(x =&gt; x.HasInventory(
				It.IsAny&lt;string&gt;(),
				It.IsInRange(0, 100, Range.Inclusive)))
				.Returns(false);
			</code>
		</example>
	</doc>
	<doc for="It.IsIn(enumerable)">
		<example>
			The following example shows how to expect a method call
			with an integer argument with value from a list.
			<code>
				var values = new List&lt;int&gt; { 1, 2, 3 };
			
				mock.Setup(x =&gt; x.HasInventory(
				It.IsAny&lt;string&gt;(),
				It.IsIn(values)))
				.Returns(false);
			</code>
		</example>
	</doc>
	<doc for="It.IsIn(params)">
		<example>
			The following example shows how to expect a method call
			with an integer argument with a value of 1, 2, or 3.
			<code>
				mock.Setup(x =&gt; x.HasInventory(
				It.IsAny&lt;string&gt;(),
				It.IsIn(1, 2, 3)))
				.Returns(false);
			</code>
		</example>
	</doc>
	<doc for="It.IsNotIn(enumerable)">
		<example>
			The following example shows how to expect a method call
			with an integer argument with value not found from a list.
			<code>
				var values = new List&lt;int&gt; { 1, 2, 3 };
				
				mock.Setup(x =&gt; x.HasInventory(
				It.IsAny&lt;string&gt;(),
				It.IsNotIn(values)))
				.Returns(false);
			</code>
		</example>
	</doc>
	<doc for="It.IsNotIn(params)">
		<example>
			The following example shows how to expect a method call
			with an integer argument of any value except 1, 2, or 3.
			<code>
				mock.Setup(x =&gt; x.HasInventory(
				It.IsAny&lt;string&gt;(),
				It.IsNotIn(1, 2, 3)))
				.Returns(false);
			</code>
		</example>
	</doc>
	<doc for="It.IsRegex(regex)">
		<example>
			The following example shows how to expect a call to a method where the
			string argument matches the given regular expression:
			<code>
				mock.Setup(x => x.Check(It.IsRegex("[a-z]+"))).Returns(1);
			</code>
		</example>		
	</doc>
	<doc for="It.IsRegex(regex,options)">
		<example>
			The following example shows how to expect a call to a method where the
			string argument matches the given regular expression, in a case insensitive way:
			<code>
				mock.Setup(x => x.Check(It.IsRegex("[a-z]+", RegexOptions.IgnoreCase))).Returns(1);
			</code>
		</example>
	</doc>
</docs>

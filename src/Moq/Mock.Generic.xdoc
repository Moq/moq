<?xml version="1.0" encoding="utf-8" ?>
<docs xml:space="preserve">
	<doc for="Mock{T}">
		<example group="overview" order="0">
			The following example shows establishing setups with specific values
			for method invocations:
			<code>
				// Arrange
				var order = new Order(TALISKER, 50);
				var mock = new Mock&lt;IWarehouse&gt;();

				mock.Setup(x => x.HasInventory(TALISKER, 50)).Returns(true);

				// Act
				order.Fill(mock.Object);

				// Assert
				Assert.True(order.IsFilled);
			</code>
			The following example shows how to use the <see cref="It"/> class
			to specify conditions for arguments instead of specific values:
			<code>
				// Arrange
				var order = new Order(TALISKER, 50);
				var mock = new Mock&lt;IWarehouse&gt;();

				// shows how to expect a value within a range
				mock.Setup(x => x.HasInventory(
							It.IsAny&lt;string&gt;(),
							It.IsInRange(0, 100, Range.Inclusive)))
					 .Returns(false);

				// shows how to throw for unexpected calls.
				mock.Setup(x => x.Remove(
							It.IsAny&lt;string&gt;(),
							It.IsAny&lt;int&gt;()))
					 .Throws(new InvalidOperationException());

				// Act
				order.Fill(mock.Object);

				// Assert
				Assert.False(order.IsFilled);
			</code>
		</example>
	</doc>
	<doc for="Mock{T}.ctor()">
		<example>
			<code>var mock = new Mock&lt;IFormatProvider&gt;();</code>
		</example>
	</doc>
	<doc for="Mock{T}.ctor(object[])">
		<example>
			<code>var mock = new Mock&lt;MyProvider&gt;(someArgument, 25);</code>
		</example>
	</doc>
	<doc for="Mock{T}.ctor(MockBehavior)">
		<example>
			<code>var mock = new Mock&lt;IFormatProvider&gt;(MockBehavior.Relaxed);</code>
		</example>
	</doc>
	<doc for="Mock{T}.ctor(MockBehavior,object[])">
		<example>
			<code>var mock = new Mock&lt;MyProvider&gt;(someArgument, 25);</code>
		</example>
	</doc>
	<doc for="Mock{T}.Setup">
		<example group="setups">
			<code>
				var mock = new Mock&lt;IProcessor&gt;();
				mock.Setup(x =&gt; x.Execute("ping"));
			</code>
		</example>
	</doc>
	<doc for="Mock{T}.Setup{TResult}">
		<example group="setups">
			<code>
				mock.Setup(x =&gt; x.HasInventory("Talisker", 50)).Returns(true);
			</code>
		</example>
	</doc>
	<doc for="Mock{T}.SetupGet">
		<example group="setups">
			<code>
				mock.SetupGet(x =&gt; x.Suspended)
					 .Returns(true);
			</code>
		</example>
	</doc>
	<doc for="Mock{T}.SetupSet{TProperty}">
		<example group="setups">
			<code>
				mock.SetupSet(x =&gt; x.Suspended = true);
			</code>
		</example>
	</doc>
	<doc for="Mock{T}.SetupSet">
		<example group="setups">
			<code>
				mock.SetupSet(x =&gt; x.Suspended = true);
			</code>
		</example>
	</doc>
	<doc for="Mock{T}.SetupProperty(property)">
		<example>
			If you have an interface with an int property <c>Value</c>, you might
			stub it using the following straightforward call:
			<code>
				var mock = new Mock&lt;IHaveValue&gt;();
				mock.Stub(v => v.Value);
			</code>
			After the <c>Stub</c> call has been issued, setting and
			retrieving the object value will behave as expected:
			<code>
				IHaveValue v = mock.Object;

				v.Value = 5;
				Assert.Equal(5, v.Value);
			</code>
		</example>
	</doc>
	<doc for="Mock{T}.SetupProperty(property,initialValue)">
		<example>
			If you have an interface with an int property <c>Value</c>, you might
			stub it using the following straightforward call:
			<code>
				var mock = new Mock&lt;IHaveValue&gt;();
				mock.SetupProperty(v => v.Value, 5);
			</code>
			After the <c>SetupProperty</c> call has been issued, setting and
			retrieving the object value will behave as expected:
			<code>
				IHaveValue v = mock.Object;
				// Initial value was stored
				Assert.Equal(5, v.Value);

				// New value set which changes the initial value
				v.Value = 6;
				Assert.Equal(6, v.Value);
			</code>
		</example>
	</doc>
	<doc for="Mock{T}.Verify(expression)">
		<example group="verification">
			This example assumes that the mock has been used, and later we want to verify that a given
			invocation with specific parameters was performed:
			<code>
				var mock = new Mock&lt;IProcessor&gt;();
				// exercise mock
				//...
				// Will throw if the test code didn't call Execute with a "ping" string argument.
				mock.Verify(proc =&gt; proc.Execute("ping"));
			</code>
		</example>
	</doc>
	<doc for="Mock{T}.Verify(expression,failMessage)">
		<example group="verification">
			This example assumes that the mock has been used, and later we want to verify that a given
			invocation with specific parameters was performed:
			<code>
				var mock = new Mock&lt;IProcessor&gt;();
				// exercise mock
				//...
				// Will throw if the test code didn't call Execute with a "ping" string argument.
				mock.Verify(proc =&gt; proc.Execute("ping"));
			</code>
		</example>
	</doc>
	<doc for="Mock{T}.Verify{TResult}(expression)">
		<example group="verification">
			This example assumes that the mock has been used, and later we want to verify that a given
			invocation with specific parameters was performed:
			<code>
				var mock = new Mock&lt;IWarehouse&gt;();
				// exercise mock
				//...
				// Will throw if the test code didn't call HasInventory.
				mock.Verify(warehouse =&gt; warehouse.HasInventory(TALISKER, 50));
			</code>
		</example>
	</doc>
	<doc for="Mock{T}.Verify{TResult}(expression,failMessage)">
		<example group="verification">
			This example assumes that the mock has been used,
			and later we want to verify that a given invocation
			with specific parameters was performed:
			<code>
				var mock = new Mock&lt;IWarehouse&gt;();
				// exercise mock
				//...
				// Will throw if the test code didn't call HasInventory.
				mock.Verify(warehouse =&gt; warehouse.HasInventory(TALISKER, 50), "When filling orders, inventory has to be checked");
			</code>
		</example>
	</doc>
	<doc for="Mock{T}.VerifyGet(expression)">
		<example group="verification">
			This example assumes that the mock has been used,
			and later we want to verify that a given property
			was retrieved from it:
			<code>
				var mock = new Mock&lt;IWarehouse&gt;();
				// exercise mock
				//...
				// Will throw if the test code didn't retrieve the IsClosed property.
				mock.VerifyGet(warehouse =&gt; warehouse.IsClosed);
			</code>
		</example>
	</doc>
	<doc for="Mock{T}.VerifyGet(expression,failMessage)">
		<example group="verification">
			This example assumes that the mock has been used,
			and later we want to verify that a given property
			was retrieved from it:
			<code>
				var mock = new Mock&lt;IWarehouse&gt;();
				// exercise mock
				//...
				// Will throw if the test code didn't retrieve the IsClosed property.
				mock.VerifyGet(warehouse =&gt; warehouse.IsClosed);
			</code>
		</example>
	</doc>
	<doc for="Mock{T}.VerifySet(expression)">
		<example group="verification">
			This example assumes that the mock has been used,
			and later we want to verify that a given property
			was set on it:
			<code>
				var mock = new Mock&lt;IWarehouse&gt;();
				// exercise mock
				//...
				// Will throw if the test code didn't set the IsClosed property.
				mock.VerifySet(warehouse =&gt; warehouse.IsClosed = true);
			</code>
		</example>
	</doc>
	<doc for="Mock{T}.VerifySet(expression,failMessage)">
		<example group="verification">
			This example assumes that the mock has been used,
			and later we want to verify that a given property
			was set on it:
			<code>
				var mock = new Mock&lt;IWarehouse&gt;();
				// exercise mock
				//...
				// Will throw if the test code didn't set the IsClosed property.
				mock.VerifySet(warehouse =&gt; warehouse.IsClosed = true, "Warehouse should always be closed after the action");
			</code>
		</example>
	</doc>
	<doc for="Mock{T}.Raise">
		<example>
			The following example shows how to raise a <see cref="System.ComponentModel.INotifyPropertyChanged.PropertyChanged"/> event:
			<code>
				var mock = new Mock&lt;IViewModel&gt;();

				mock.Raise(x => x.PropertyChanged -= null, new PropertyChangedEventArgs("Name"));
			</code>
		</example>
		<example>
			This example shows how to invoke an event with a custom event arguments
			class in a view that will cause its corresponding presenter to
			react by changing its state:
			<code>
				var mockView = new Mock&lt;IOrdersView&gt;();
				var presenter = new OrdersPresenter(mockView.Object);

				// Check that the presenter has no selection by default
				Assert.Null(presenter.SelectedOrder);

				// Raise the event with a specific arguments data
				mockView.Raise(v => v.SelectionChanged += null, new OrderEventArgs { Order = new Order("moq", 500) });

				// Now the presenter reacted to the event, and we have a selected order
				Assert.NotNull(presenter.SelectedOrder);
				Assert.Equal("moq", presenter.SelectedOrder.ProductName);
			</code>
		</example>		
	</doc>
	<doc for="Mock{T}.Raise(args)">
		<example>
			The following example shows how to raise a custom event that does not adhere to 
			the standard <c>EventHandler</c>:
			<code>
				var mock = new Mock&lt;IViewModel&gt;();

				mock.Raise(x => x.MyEvent -= null, "Name", bool, 25);
			</code>
		</example>
	</doc>
</docs>
